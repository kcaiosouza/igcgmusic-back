generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Plan {
  FREE
  PREMIUM
}

enum StatusPayment {
  PENDING
  APPROVED
  FAILED
  CANCELED
}

enum StatusLyricsSubmitted {
  PENDING
  APPROVED
  REJECTED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PIX
}

enum Language {
  pt_BR // Português (Brasil)
  en_US // Inglês (Estados Unidos)
  es_ES // Espanhol (Espanha)
  de_DE // Alemão (Alemanha)
  fr_FR // Francês (França)
  it_IT // Italiano (Itália)
  af_AF // Africano (África)
}

model User {
  id               String             @id @default(uuid())
  first_name       String
  last_name        String
  username         String             @unique
  email            String             @unique
  password_hash    String
  image_url        String             @db.Text
  birth_date       DateTime?
  plan             Plan               @default(FREE)
  created_at       DateTime           @default(now())
  updated_at       DateTime?          @updatedAt
  Transaction      Transaction[]
  Playlist         Playlist[]
  Favorite         Favorite[]
  SongLog          SongLog[]
  LyricsSubmission LyricsSubmission[]

  @@map("users")
}

model Transaction {
  id               String        @id @default(uuid())
  user             User          @relation(fields: [user_id], references: [id])
  user_id          String
  plan             Plan          @default(PREMIUM)
  status           StatusPayment @default(PENDING)
  amount           Float
  currency         String        @default("BRL")
  transaction_date DateTime      @default(now())
  payment_method   PaymentMethod
  created_at       DateTime      @default(now())
  updated_at       DateTime?     @updatedAt

  @@map("transactions")
}

model Song {
  id               String             @id @default(uuid())
  title            String
  slug             String             @unique
  album            Album              @relation(fields: [album_id], references: [id])
  album_id         String
  artist           Artist             @relation(fields: [artist_id], references: [id])
  artist_id        String
  language         Language
  file_url         String             @db.Text
  lyrics           String?            @db.Text
  chords           String?            @db.Text
  duration         Int
  play_count       Int                @default(0)
  created_at       DateTime           @default(now())
  updated_at       DateTime?          @updatedAt
  PlaylistSongs    PlaylistSong[]
  SongLog          SongLog[]
  LyricsSubmission LyricsSubmission[]
  MusicHighlight   MusicHighlight[]

  @@map("songs")
}

model Album {
  id           String    @id @default(uuid())
  title        String
  slug         String    @unique
  release_date DateTime
  artist       Artist    @relation(fields: [artist_id], references: [id])
  artist_id    String
  image_url    String    @db.Text
  created_at   DateTime  @default(now())
  updated_at   DateTime? @updatedAt
  Song         Song[]

  @@map("albuns")
}

model Artist {
  id         String    @id @default(uuid())
  name       String
  slug       String    @unique
  bio        String?   @db.Text
  image_url  String    @db.Text
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
  Album      Album[]
  Song       Song[]

  @@map("artists")
}

model Playlist {
  id            String         @id @default(uuid())
  user          User           @relation(fields: [user_id], references: [id])
  user_id       String
  title         String
  is_public     Boolean
  image_url     String         @db.Text
  created_at    DateTime       @default(now())
  updated_at    DateTime?      @updatedAt
  PlaylistSongs PlaylistSong[]
  Favorite      Favorite[]

  @@map("playlists")
}

model PlaylistSong {
  id          String   @id @default(uuid())
  playlist    Playlist @relation(fields: [playlist_id], references: [id])
  playlist_id String
  song        Song     @relation(fields: [song_id], references: [id])
  song_id     String
  added_at    DateTime @default(now())

  @@map("playlist_songs")
}

model Favorite {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [user_id], references: [id])
  user_id     String
  playlist    Playlist @relation(fields: [playlist_id], references: [id])
  playlist_id String
  created_at  DateTime @default(now())

  @@map("favorites")
}

model SongLog {
  id              Int      @id @default(autoincrement())
  user            User     @relation(fields: [user_id], references: [id])
  user_id         String
  song            Song     @relation(fields: [song_id], references: [id])
  song_id         String
  played_at       DateTime
  duration_played Int

  @@map("song_logs")
}

model LyricsSubmission {
  id               String                @id @default(uuid())
  user             User                  @relation(fields: [user_id], references: [id])
  user_id          String
  song             Song                  @relation(fields: [song_id], references: [id])
  song_id          String
  submitted_lyrics String                @db.Text
  status           StatusLyricsSubmitted @default(PENDING)
  submitted_at     DateTime              @default(now())
  reviewed_at      DateTime?

  @@map("lyrics_submissions")
}

model MusicHighlight {
  id         String   @id @default(uuid())
  month_year DateTime
  song       Song     @relation(fields: [song_id], references: [id])
  song_id    String
  play_count Int      @default(0)

  @@map("musics_highlights")
}
