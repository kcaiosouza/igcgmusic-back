generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Plan {
  FREE
  PREMIUM
}

enum Status {
  PENDING
  APPROVED
  FAILED
  CANCELED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PIX
}

enum Language {
  pt_BR // Português (Brasil)
  en_US // Inglês (Estados Unidos)
  es_ES // Espanhol (Espanha)
  de_DE // Alemão (Alemanha)
  fr_FR // Francês (França)
  it_IT // Italiano (Itália)
  af_AF // Africano (África)
}

model User {
  id            String        @id @default(uuid())
  first_name    String
  last_name     String
  username      String        @unique
  email         String        @unique
  password_hash String
  birth_date    DateTime
  plan          Plan          @default(FREE)
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
  Transaction   Transaction[]
  Playlist      Playlist[]

  @@map("users")
}

model Transaction {
  id               String        @id @default(uuid())
  user             User          @relation(fields: [user_id], references: [id])
  user_id          String
  plan             Plan          @default(PREMIUM)
  status           Status        @default(PENDING)
  amount           Float
  currency         String        @default("BRL")
  transaction_date DateTime      @default(now())
  payment_method   PaymentMethod
  created_at       DateTime      @default(now())
  updated_at       DateTime      @updatedAt

  @@map("transactions")
}

model Song {
  id            String          @id @default(uuid())
  title         String
  slug          String
  album         Album           @relation(fields: [album_id], references: [id])
  album_id      String
  artist        Artist          @relation(fields: [artist_id], references: [id])
  artist_id     String
  language      Language
  lyrics        String?
  chords        String?
  duration      Int
  play_count    Int             @default(0)
  created_at    DateTime        @default(now())
  updated_at    DateTime        @updatedAt
  PlaylistSongs PlaylistSongs[]

  @@map("songs")
}

model Album {
  id           String   @id @default(uuid())
  title        String
  slug         String
  release_date DateTime
  artist       Artist   @relation(fields: [artist_id], references: [id])
  artist_id    String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  Song         Song[]

  @@map("albuns")
}

model Artist {
  id         String   @id @default(uuid())
  name       String
  slug       String
  bio        String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  Album      Album[]
  Song       Song[]

  @@map("artists")
}

model Playlist {
  id            String          @id @default(uuid())
  user          User            @relation(fields: [user_id], references: [id])
  user_id       String
  title         String
  is_public     Boolean
  created_at    DateTime        @default(now())
  updated_at    DateTime        @updatedAt
  PlaylistSongs PlaylistSongs[]

  @@map("playlists")
}

model PlaylistSongs {
  id          String   @id @default(uuid())
  playlist    Playlist @relation(fields: [playlist_id], references: [id])
  playlist_id String
  song        Song     @relation(fields: [song_id], references: [id])
  song_id     String
  added_at    DateTime @default(now())
}
